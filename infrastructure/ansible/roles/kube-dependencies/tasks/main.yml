---
- name: Prepare Kubernetes nodes on CentOS
  block:
    - name: Disable SELinux
      selinux:
        state: disabled
      ignore_errors: yes # In case SELinux is already disabled or not present


    - name: Unconditionally reboot the machine with all defaults
      ansible.builtin.reboot:

    - name: Disable Swap
      shell: swapoff -a

    - name: Comment out swap entries in /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^(\s*[^#]+\s+swap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Add Kubernetes yum repo
      yum_repository:
        name: kubernetes
        description: Kubernetes Repository
        baseurl: https://pkgs.k8s.io/core:/stable:/v1.34/rpm/
        gpgcheck: yes
        repo_gpgcheck: yes
        gpgkey: https://pkgs.k8s.io/core:/stable:/v1.34/rpm/repodata/repomd.xml.key
        enabled: yes

    - name: Refresh YUM package cache
      ansible.builtin.yum:
        update_cache: yes

    - name: Install necessary packages
      yum:
        name: "{{ item }}"
        state: present
      loop:
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
    
    - name: Download containerd RPM
      get_url:
        url: https://download.docker.com/linux/centos/9/x86_64/stable/Packages/containerd.io-1.7.27-3.1.el9.x86_64.rpm
        dest: /tmp/containerd.io.rpm

    - name: Import Docker GPG key for containerd
      ansible.builtin.rpm_key:
        key: https://download.docker.com/linux/centos/gpg
        state: present

    - name: Install containerd RPM
      yum:
        name: /tmp/containerd.io.rpm
        state: present

    - name: Enable and start Containerd (or Docker)
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - containerd # Or docker

    - name: Ensure br_netfilter module is loaded
      ansible.builtin.modprobe:
        name: br_netfilter
        state: present

    - name: Persist br_netfilter across reboots
      ansible.builtin.copy:
        dest: /etc/modules-load.d/br_netfilter.conf
        content: "br_netfilter\n"
        owner: root
        group: root
        mode: '0644'

    - name: Configure sysctl for Kubernetes
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { key: 'net.ipv4.ip_forward', value: '1' }

    - name: Load br_netfilter module
      modprobe:
        name: br_netfilter
        state: present

    - name: Ensure br_netfilter module is loaded on boot
      copy:
        content: |
          br_netfilter
        dest: /etc/modules-load.d/br_netfilter.conf
        owner: root
        group: root
        mode: '0644'

    - name: Install Kubelet
      yum:
        name: kubelet
        state: present

    - name: Install Kubeadm
      yum:
        name: kubeadm
        state: present

    - name: Reload systemd
      ansible.builtin.command: systemctl daemon-reexec

    - name: Reload systemd units
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start kubelet
      ansible.builtin.systemd:
        name: kubelet
        enabled: yes
        state: started
